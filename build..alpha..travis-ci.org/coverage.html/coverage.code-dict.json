{"/home/travis/build/npmtest/node-npmtest-win32ole/test.js":"/* istanbul instrument in package npmtest_win32ole */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-win32ole/lib.npmtest_win32ole.js":"/* istanbul instrument in package npmtest_win32ole */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_win32ole = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_win32ole = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-win32ole/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-win32ole && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_win32ole */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_win32ole\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_win32ole.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_win32ole.rollup.js'] =\n            local.assetsDict['/assets.npmtest_win32ole.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_win32ole.__dirname + '/lib.npmtest_win32ole.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-win32ole/node_modules/win32ole/lib/win32ole.js":"// Inspired by https://github.com/TooTallNate/node-sqlite3\nvar win32ole = module.exports = exports =\n  require('../build/Release/node_win32ole.node');\nwin32ole.MODULEDIRNAME = __dirname;\nwin32ole.get_package_version = function(){\n  var fs = require('fs');\n  var path = require('path');\n  var fn = path.join(win32ole.MODULEDIRNAME, '../package.json');\n  try{\n    win32ole.VERSION = JSON.parse(fs.readFileSync(fn, 'utf8'))['version'];\n  }catch(e){\n    win32ole.VERSION = e;\n  }\n};\nwin32ole.get_package_version();\n\n/*\n  exchange (VT type <-> v8 type)\n  VT_ERROR -> *** ( Int32 ) ***\n  VT_EMPTY -> *** ( Empty or Undefined ) ***\n  VT_SAFEARRAY <-> VT_SAFEARRAY, (VT_BYREF | VT_SAFEARRAY)\n  VT_VARIANT <-> VT_VARIANT, VT_USERDEFINED, VT_ARRAY, (VT_BYREF | VT_VARIANT)\n  exchange (VT type <-> C/C++ type <-> v8 type)\n  VT_DISPATCH, VT_UNKNOWN <-> OCVariant <-> V8Variant\n  VT_BSTR (VT_CLSID, VT_FILETIME, VT_LPWSTR, VT_LPSTR,\n    VT_DECIMAL, VT_ERROR, VT_BSTR) <-> string <-> Utf8Value\n  VT_DATE <-> double <-> Date\n  VT_I2 -> int16_t (short) -> Int32\n  VT_UI2 -> uint16_t (ushort) -> Int32\n  VT_I4 (VT_INT, VT_I4) <-> int32_t (long) <-> Int32\n  VT_UI4 (VT_UINT, VT_UI4) -> uint32_t (ulong) -> Int32\n  VT_I8 -> int64_t (long long) -> Number\n  VT_UI8 -> uint64_t (ulonglong) -> Number\n  VT_R4 -> float -> Number\n  VT_R8 (VT_CY, VT_R8) <-> double <-> Number\n  VT_I1 (VT_UI1, VT_I1) -> char (uchar) -> *** ( Int32 ) ***\n  VT_BOOL <-> bool <-> Boolean\n  VT_NULL <-> NULL <-> Null\n*/\n\nwin32ole.vt_enum = {\n  VT_EMPTY: 0, VT_NULL: 1,\n  VT_I2: 2, VT_I4: 3, VT_R4: 4, VT_R8: 5, VT_CY: 6, VT_DATE: 7, VT_BSTR: 8,\n  VT_DISPATCH: 9, VT_ERROR: 10, VT_BOOL: 11, VT_VARIANT: 12, VT_UNKNOWN: 13,\n  VT_DECIMAL: 14, // 15\n  VT_I1: 16, VT_UI1: 17, VT_UI2: 18, VT_UI4: 19,\n  VT_I8: 20, VT_UI8: 21, VT_INT: 22, VT_UINT: 23,\n  VT_VOID: 24, VT_HRESULT: 25, VT_PTR: 26, VT_SAFEARRAY: 27, VT_CARRAY: 28,\n  VT_USERDEFINED: 29, VT_LPSTR: 30, VT_LPWSTR: 31, // 32-35\n  VT_RECORD: 36, // 37-63\n  VT_FILETIME: 64, VT_BLOB: 65, VT_STREAM: 66, VT_STORAGE: 67,\n  VT_STREAM_OBJECT: 68, VT_STORED_OBJECT: 69, VT_BLOB_OBJECT: 70,\n  VT_CF: 71, VT_CLSID: 72, // 73-4094\n  VT_BSTR_BLOB: 4095, // 0x0fff\n  VT_VECTOR: 4096, // flag 0x1000\n  VT_ARRAY: 8192, // flag 0x2000\n  VT_BYREF: 16384, // flag 0x4000\n  VT_RESERVED: 32768, // flag 0x8000\n  VT_ILLEGAL: 65535, // -1 0xffff\n  VT_ILLEGALMASKED: 4095, // 0x0fff *** caution ***\n  VT_TYPEMASK: 4095 // 0x0fff *** caution ***\n};\n\nwin32ole.vt_names = (function(){\n  var names = {};\n  var vte = win32ole.vt_enum;\n  var xkey = 'VT_BSTR_BLOB';\n  var xnum = vte[xkey];\n  for(var k in vte) if(vte[k] != xnum) names[vte[k]] = k; // must use typemask\n  names[xnum] = xkey;\n  return names;\n})();\n\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nfunction errorCallback(args){\n  if(typeof args[args.length - 1] === 'function'){\n    var callback = args[args.length - 1];\n    return function(err){ if(err) callback(err); }\n  }\n}\n\nfunction inherits(target, source){\n  for(var k in source.prototype) target.prototype[k] = source.prototype[k];\n}\n\nvar isVerbose = false;\nvar supportedEvents = ['trace', 'profile'];\nvar V8Variant = win32ole.V8Variant;\nvar Client = win32ole.Client;\n\ninherits(V8Variant, EventEmitter);\ninherits(Client, EventEmitter);\n\nV8Variant.prototype.map = function(){\n  var params = Array.prototype.slice.call(arguments);\n  var callback = params.pop();\n  params.push(function(err, rows){\n    if(err) return callback(err);\n    var result = {};\n    if(rows.length){\n      var keys = Object.keys(rows[0]), key = keys[0];\n      if(keys.length > 2){ // Value is an Object\n        for(var i = 0; i < rows.length; i++)\n          result[rows[i][key]] = rows[i];\n      }else{ // Value is a plain value\n        var value = keys[i];\n        for(var i = 0; i < rows.length; i++)\n          result[rows[i][key]] = rows[i][value];\n      }\n    }\n    callback(err, result);\n  });\n  return this.all.apply(this, params);\n};\n\nClient.prototype.map = function(){\n  var params = Array.prototype.slice.call(arguments);\n  var callback = params.pop();\n  params.push(function(err, rows){\n    if(err) return callback(err);\n    var result = {};\n    if(rows.length){\n      var keys = Object.keys(rows[0]), key = keys[0];\n      if(keys.length > 2){ // Value is an Object\n        for(var i = 0; i < rows.length; i++)\n          result[rows[i][key]] = rows[i];\n      }else{ // Value is a plain value\n        var value = keys[i];\n        for(var i = 0; i < rows.length; i++)\n          result[rows[i][key]] = rows[i][value];\n      }\n    }\n    callback(err, result);\n  });\n  return this.all.apply(this, params);\n};\n\n// Save the stack trace over EIO callbacks.\nwin32ole.verbose = function(){\n  if(!isVerbose){\n    var trace = require('./trace');\n    trace.extendTrace(V8Variant.prototype, 'isA');\n    trace.extendTrace(V8Variant.prototype, 'vtName');\n    trace.extendTrace(V8Variant.prototype, 'toBoolean'); // *** p.\n    trace.extendTrace(V8Variant.prototype, 'toInt32'); // *** p.\n    trace.extendTrace(V8Variant.prototype, 'toInt64'); // *** p.\n    trace.extendTrace(V8Variant.prototype, 'toNumber'); // *** p.\n    trace.extendTrace(V8Variant.prototype, 'toDate'); // *** p.\n    trace.extendTrace(V8Variant.prototype, 'toUtf8'); // *** p.\n    trace.extendTrace(V8Variant.prototype, 'toValue');\n    trace.extendTrace(V8Variant.prototype, 'call');\n    trace.extendTrace(V8Variant.prototype, 'get');\n    trace.extendTrace(V8Variant.prototype, 'set');\n    trace.extendTrace(V8Variant.prototype, 'map');\n    trace.extendTrace(Client.prototype, 'Dispatch');\n    trace.extendTrace(Client.prototype, 'map');\n    isVerbose = true;\n  }\n  return this;\n};\n\nwin32ole.client = new win32ole.Client;\nprocess.on('exit', function(){\n  win32ole.client.Finalize();\n  // win32ole.print('EXIT\\n');\n});\n\nglobal.ActiveXObject = function(args){\n  return win32ole.client.Dispatch(args);\n};\n","/home/travis/build/npmtest/node-npmtest-win32ole/node_modules/win32ole/win32ole.js":"module.exports = require('./lib/win32ole');","/home/travis/build/npmtest/node-npmtest-win32ole/node_modules/win32ole/lib/index.js":"module.exports = require('./win32ole');","/home/travis/build/npmtest/node-npmtest-win32ole/node_modules/win32ole/lib/trace.js":"// Inspired by https://github.com/tlrobinson/long-stack-traces\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nfunction extendTrace(object, property, pos) {\n    var old = object[property];\n    object[property] = function() {\n        var error = new Error();\n        var name = object.constructor.name + '#' + property + '(' + \n            Array.prototype.slice.call(arguments).map(function(el) {\n                return util.inspect(el, false, 0);\n            }).join(', ') + ')';\n\n        if (typeof pos === 'undefined') pos = -1;\n        if (pos < 0) pos += arguments.length;\n        var cb = arguments[pos];\n        if (typeof arguments[pos] === 'function') {\n            arguments[pos] = function replacement() {\n                try {\n                    return cb.apply(this, arguments);\n                } catch (err) {\n                    if (err && err.stack && !err.__augmented) {\n                        err.stack = filter(err).join('\\n');\n                        err.stack += '\\n--> in ' + name;\n                        err.stack += '\\n' + filter(error).slice(1).join('\\n');\n                        err.__augmented = true;\n                    }\n                    throw err;\n                }\n            };\n        }\n        return old.apply(this, arguments);\n    };\n}\nexports.extendTrace = extendTrace;\n\n\nfunction filter(error) {\n    return error.stack.split('\\n').filter(function(line) {\n        return line.indexOf(__filename) < 0;\n    });\n}\n"}